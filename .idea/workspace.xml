<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="b54d3a42-d4db-4474-a9ce-cc6cd14cc6b5" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/dbnavigator.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/controller/UserInputController.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Invoice.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Pesanan.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Product.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/service/PesananService.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/view/MenuView.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/Topic4/Main.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/ini/MenuService.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/ini/OrderService.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/ini/OrderServiceImpl.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/java/org/example/MenuPesanan/controller/java/MainTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/java/org/example/MenuPesanan/controller/java/UserInputControllerTest.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/src/main/java/org/example/ini/OrderService.java" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="2YI8CXve2sYyvnSx8wzjy3WDkeL" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
  }
}</component>
  <component name="RunManager">
    <configuration default="true" type="JetRunConfigurationType">
      <module name="CH3" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
      <module name="CH3" />
      <option name="filePath" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b54d3a42-d4db-4474-a9ce-cc6cd14cc6b5" name="Changes" comment="" />
      <created>1700145662216</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1700145662216</updated>
    </task>
    <servers />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="56ada9">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/view/MenuView.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Invoice.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Pesanan.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Product.java" />
                </list>
              </option>
              <option name="id" value="56ada9" />
              <option name="initiateTms" value="1700219902681" />
              <option name="request" value="How to fix the following error:&#10;'{' or ';' expected" />
              <option name="response" value="" />
              <option name="responseDescription" value="The error &quot;'{' or ';' expected&quot; is usually caused by a syntax error in the code. In this case, the error is occurring in the `MenuView` class. Looking at the code, I can see that there are syntax errors in the `PRODUCTS` list initialization. The closing double quotes are missing for the `Bakso Urat` and `Bakso Telor` products.&#10;&#10;To fix the error, you need to add the closing double quotes for those two products. Here's the corrected code:&#10;&#10;```java&#10;public class MenuView {&#10;&#10;    public static final String SEPARATOR = &quot;==================&quot;;&#10;&#10;    public static final List&lt;Product&gt; PRODUCTS = Arrays.asList(&#10;            new Product(&quot;Mie Ayam&quot;, 12000),&#10;            new Product(&quot;Bakso Urat&quot;, 13000),&#10;            new Product(&quot;Bakso Telor&quot;, 15000),&#10;            new Product(&quot;Nasi Goreng&quot;, 10000)&#10;    );&#10;&#10;    // Rest of the code...&#10;}&#10;```&#10;&#10;After making this change, the syntax error should be resolved." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1700219913035" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/view/MenuView.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Pesanan.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Invoice.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/model/Product.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="961355">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/org/example/MenuPesanan/controller/java/Test.java" />
                </list>
              </option>
              <option name="id" value="961355" />
              <option name="initiateTms" value="1700220527648" />
              <option name="request" value="How to fix the following error:&#10;Class 'Test' is never used" />
              <option name="response" value="" />
              <option name="responseDescription" value="The error &quot;Class 'Test' is never used&quot; indicates that the `Test` class is defined but not used anywhere in the code. To fix this error, you have a few options:&#10;&#10;1. Remove the unused class: If the `Test` class is not needed in the codebase, you can simply delete the class to eliminate the error.&#10;&#10;2. Use the `Test` class: If the `Test` class is intended to be used but is currently not being used, you can modify the code to use the class. For example, you can create an instance of the `Test` class and call its methods. Here's an example:&#10;&#10;```java&#10;package org.example.MenuPesanan.controller.java;&#10;&#10;import org.example.topic4.Test;&#10;&#10;public class UserInputController {&#10;    public void someMethod() {&#10;        Test test = new Test();&#10;        test.testing();&#10;    }&#10;}&#10;```&#10;&#10;In this example, the `Test` class is imported and used in the `UserInputController` class by creating an instance of `Test` and calling its `testing()` method.&#10;&#10;3. Suppress the warning: If you want to keep the `Test` class in the codebase but don't want to use it at the moment, you can suppress the warning by adding the `@SuppressWarnings(&quot;unused&quot;)` annotation above the class declaration. Here's an example:&#10;&#10;```java&#10;@SuppressWarnings(&quot;unused&quot;)&#10;public class Test {&#10;    // Class implementation&#10;}&#10;```&#10;&#10;By adding this annotation, the compiler will ignore the &quot;Class 'Test' is never used&quot; warning.&#10;&#10;Choose the option that best suits your requirements and make the necessary changes to fix the error." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1700220542421" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/org/example/MenuPesanan/controller/java/Test.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="c3bcf6">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/controller/UserInputController.java" />
                </list>
              </option>
              <option name="id" value="c3bcf6" />
              <option name="initiateTms" value="1700219598694" />
              <option name="request" value="Generate tests for class UserInputController" />
              <option name="response" value="package org.example.MenuPesanan.controller;&#10;&#10;import org.example.MenuPesanan.model.Invoice;&#10;import org.example.MenuPesanan.model.Pesanan;&#10;import org.example.MenuPesanan.model.Product;&#10;import org.example.MenuPesanan.service.PesananService;&#10;import org.example.MenuPesanan.view.MenuView;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.Mockito;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;public class UserInputControllerTest {&#10;&#10;    @Mock&#10;    private Scanner scanner;&#10;&#10;    @Mock&#10;    private PesananService pesananService;&#10;&#10;    @InjectMocks&#10;    private UserInputController userInputController;&#10;&#10;    @BeforeEach&#10;    public void setUp() {&#10;        userInputController = new UserInputController();&#10;    }&#10;&#10;    @Test&#10;    public void testInputMainMenuWhenUserEntersZeroThenExit() {&#10;        when(scanner.nextInt()).thenReturn(0);&#10;        Invoice invoice = userInputController.inputMainMenu();&#10;        assertThat(invoice).isNull();&#10;        verify(scanner, times(1)).nextInt();&#10;    }&#10;&#10;    @Test&#10;    public void testInputMainMenuWhenUserEntersValidOptionThenInputMenuDetail() {&#10;        when(scanner.nextInt()).thenReturn(1, 2);&#10;        Product product = MenuView.PRODUCTS.get(0);&#10;        List&lt;Pesanan&gt; pesananList = new ArrayList&lt;&gt;();&#10;        pesananList.add(Pesanan.builder()&#10;                .namaProduk(product.getNamaProduk())&#10;                .quantity(2)&#10;                .totalHarga(2 * product.getHarga())&#10;                .build());&#10;        when(pesananService.totalPembayaran(pesananList)).thenReturn(2 * product.getHarga());&#10;        Invoice invoice = userInputController.inputMainMenu();&#10;        assertThat(invoice.getPesananList()).isEqualTo(pesananList);&#10;        assertThat(invoice.getTotalPembayaran()).isEqualTo(2 * product.getHarga());&#10;        verify(scanner, times(2)).nextInt();&#10;    }&#10;&#10;    @Test&#10;    public void testInputMainMenuWhenUserEntersInvalidOptionThenNoAction() {&#10;        when(scanner.nextInt()).thenReturn(99);&#10;        Invoice invoice = userInputController.inputMainMenu();&#10;        assertThat(invoice.getPesananList()).isEmpty();&#10;        assertThat(invoice.getTotalPembayaran()).isEqualTo(0);&#10;        verify(scanner, times(1)).nextInt();&#10;    }&#10;}&#10;" />
              <option name="responseDescription" value="&lt;em&gt;Unit Test Agent: generating unit tests for src/main/java/org/example/MenuPesanan/controller/UserInputController.java.&lt;br/&gt;&lt;/em&gt;&lt;em&gt;&lt;br/&gt;Let's test the following cases for you:&lt;br/&gt;testInputMainMenuWhenUserEntersZeroThenExit - Test the inputMainMenu method when the user enters 0&lt;br/&gt;testInputMainMenuWhenUserEntersValidOptionThenInputMenuDetail - Test the inputMainMenu method when the user enters a valid menu option&lt;br/&gt;testInputMainMenuWhenUserEntersInvalidOptionThenNoAction - Test the inputMainMenu method when the user enters an invalid option&lt;br/&gt;&lt;br/&gt;&lt;/em&gt;&lt;em&gt;I have figured out how to test it.&lt;br/&gt;&lt;br/&gt;&lt;/em&gt;```java&#10;package org.example.MenuPesanan.controller;&#10;&#10;import org.example.MenuPesanan.model.Invoice;&#10;import org.example.MenuPesanan.model.Pesanan;&#10;import org.example.MenuPesanan.model.Product;&#10;import org.example.MenuPesanan.service.PesananService;&#10;import org.example.MenuPesanan.view.MenuView;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.Mockito;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;public class UserInputControllerTest {&#10;&#10;    @Mock&#10;    private Scanner scanner;&#10;&#10;    @Mock&#10;    private PesananService pesananService;&#10;&#10;    @InjectMocks&#10;    private UserInputController userInputController;&#10;&#10;    @BeforeEach&#10;    public void setUp() {&#10;        userInputController = new UserInputController();&#10;    }&#10;&#10;    @Test&#10;    public void testInputMainMenuWhenUserEntersZeroThenExit() {&#10;        when(scanner.nextInt()).thenReturn(0);&#10;        Invoice invoice = userInputController.inputMainMenu();&#10;        assertThat(invoice).isNull();&#10;        verify(scanner, times(1)).nextInt();&#10;    }&#10;&#10;    @Test&#10;    public void testInputMainMenuWhenUserEntersValidOptionThenInputMenuDetail() {&#10;        when(scanner.nextInt()).thenReturn(1, 2);&#10;        Product product = MenuView.PRODUCTS.get(0);&#10;        List&lt;Pesanan&gt; pesananList = new ArrayList&lt;&gt;();&#10;        pesananList.add(Pesanan.builder()&#10;                .namaProduk(product.getNamaProduk())&#10;                .quantity(2)&#10;                .totalHarga(2 * product.getHarga())&#10;                .build());&#10;        when(pesananService.totalPembayaran(pesananList)).thenReturn(2 * product.getHarga());&#10;        Invoice invoice = userInputController.inputMainMenu();&#10;        assertThat(invoice.getPesananList()).isEqualTo(pesananList);&#10;        assertThat(invoice.getTotalPembayaran()).isEqualTo(2 * product.getHarga());&#10;        verify(scanner, times(2)).nextInt();&#10;    }&#10;&#10;    @Test&#10;    public void testInputMainMenuWhenUserEntersInvalidOptionThenNoAction() {&#10;        when(scanner.nextInt()).thenReturn(99);&#10;        Invoice invoice = userInputController.inputMainMenu();&#10;        assertThat(invoice.getPesananList()).isEmpty();&#10;        assertThat(invoice.getTotalPembayaran()).isEqualTo(0);&#10;        verify(scanner, times(1)).nextInt();&#10;    }&#10;}&#10;```&lt;em&gt;&lt;br/&gt;&lt;br/&gt;Here are the generated unit tests. Do you want to make changes to the code?&lt;br/&gt;&lt;/em&gt; ```file was provided```" />
              <option name="responseFileName" value="UserInputControllerTest.java" />
              <option name="responseFilePath" value="src/test/java/org/example/MenuPesanan/controller/" />
              <option name="responseTms" value="1700219663500" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/controller/UserInputController.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="fa6a1d">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/org/example/MenuPesanan/controller/java/MainTest.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Topic4/Main.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/controller/UserInputController.java" />
                </list>
              </option>
              <option name="id" value="fa6a1d" />
              <option name="initiateTms" value="1700220387607" />
              <option name="request" value="The file contains the following errors and warnings:&#10;- Cannot resolve symbol 'topic4' for line &quot;org.example.topic4.Test t = new org.example.topic4.Test();&quot;&#10;- Cannot resolve symbol 'topic4' for line &quot;org.example.topic4.Test t = new org.example.topic4.Test();&quot;&#10;- Cannot resolve method 'testing()' for line &quot;t.testing();&quot;" />
              <option name="response" value="" />
              <option name="responseDescription" value="The errors and warnings you mentioned are related to unresolved symbols and methods in the code. &#10;&#10;1. &quot;Cannot resolve symbol 'topic4'&quot;: This error occurs because the package `org.example.topic4` is not imported in the `MainTest` class. To fix this, you need to import the `org.example.topic4` package at the top of the `MainTest` class:&#10;&#10;```java&#10;import org.example.topic4.Test;&#10;```&#10;&#10;2. &quot;Cannot resolve method 'testing()'&quot;: This error occurs because the `Test` class does not have a method named `testing()`. To fix this, you need to check the `Test` class and make sure it has a method named `testing()`. If the method is missing, you need to add it to the `Test` class.&#10;&#10;Here's an example of how the `Test` class could be implemented:&#10;&#10;```java&#10;package org.example.topic4;&#10;&#10;public class Test {&#10;    public void testing() {&#10;        // Method implementation&#10;    }&#10;}&#10;```&#10;&#10;After making these changes, the errors and warnings should be resolved." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1700220397575" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/org/example/MenuPesanan/controller/java/MainTest.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/MenuPesanan/controller/UserInputController.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Topic4/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>